

--DROP DATABASE SewingDB;

-- Создание базы данных
CREATE DATABASE IF NOT EXISTS SewingDB;

-- Использование базы данных
USE SewingDB;

-- Создание таблицы номенклатуры с добавлением цены за штуку
CREATE TABLE IF NOT EXISTS Nomenclature (
    nom_id INT PRIMARY KEY AUTO_INCREMENT,
    nom_name VARCHAR(255) UNIQUE,
    nom_price DECIMAL(10, 2) NOT NULL -- Добавлено поле для цены за штуку
);

-- Создание таблицы задач с удалением суммы заказа
CREATE TABLE IF NOT EXISTS Tasks (
    task_id INT PRIMARY KEY AUTO_INCREMENT,
    task_custom_id INT NOT NULL,
    task_accept VARCHAR(10) NOT NULL,
    task_deli VARCHAR(10) NOT NULL,
    task_client VARCHAR(255) NOT NULL,
    task_name INT NOT NULL,
    task_count INT NOT NULL,
    task_done INT DEFAULT 0,
    task_about VARCHAR(255) DEFAULT '',
    FOREIGN KEY (task_name) REFERENCES Nomenclature(nom_id)
);

-- Создание таблицы работников
CREATE TABLE IF NOT EXISTS Workers (
    worker_id INT PRIMARY KEY AUTO_INCREMENT,
    worker_fname VARCHAR(255) NOT NULL,
    worker_sname VARCHAR(255) NOT NULL,
    worker_about VARCHAR(255) NULL
);

-- Создание таблицы связи задач и работников с добавлением суммы за день
CREATE TABLE IF NOT EXISTS Task_Workers (
    task_worker_id INT PRIMARY KEY AUTO_INCREMENT,
    task_id INT,
    worker_id INT,
    tw_done INT NOT NULL,
    tw_date VARCHAR(10) NOT NULL,
    tw_day_sum DECIMAL(10, 2),  -- Добавлено поле для суммы за день
    FOREIGN KEY (task_id) REFERENCES Tasks(task_id),
    FOREIGN KEY (worker_id) REFERENCES Workers(worker_id)
);

INSERT INTO Nomenclature (nom_name, nom_price) VALUES
('Shirt', 15.50),
('Pants', 25.00),
('Dress', 40.75),
('Jacket', 60.00),
('Skirt', 20.30);

INSERT INTO Workers (worker_fname, worker_sname, worker_about) VALUES
('John', 'Doe', 'Experienced tailor specializing in shirts'),
('Jane', 'Smith', 'Expert in dressmaking'),
('Emily', 'Brown', 'Works with pants and jackets'),
('Michael', 'Johnson', 'Skirt and jacket specialist'),
('Sara', 'Miller', 'Apprentice, learning all types of sewing');

INSERT INTO Tasks (task_custom_id, task_accept, task_deli, task_client, task_name, task_count, task_done, task_about) VALUES
(1001, '01-09-2024', '10-09-2024', 'Client A', 1, 10, 0, '10 shirts for Client A'),
(1002, '02-09-2024', '15-09-2024', 'Client B', 3, 5, 1, '5 dresses for Client B'),
(1003, '03-09-2024', '20-09-2024', 'Client C', 2, 7, 0, '7 pants for Client C'),
(1004, '04-09-2024', '25-09-2024', 'Client D', 4, 3, 1, '3 jackets for Client D'),
(1005, '05-09-2024', '30-09-2024', 'Client E', 5, 8, 0, '8 skirts for Client E');

INSERT INTO Task_Workers (task_id, worker_id, tw_done, tw_date, tw_day_sum) VALUES
(1, 1, 5, '01-09-2024', 77.50),  -- 5 из 10 рубашек
(1, 1, 5, '02-09-2024', 77.50),  -- оставшиеся 5 рубашек
(2, 2, 3, '03-09-2024', 122.25), -- 3 из 5 платьев
(2, 2, 2, '04-09-2024', 81.50),  -- оставшиеся 2 платья
(3, 3, 4, '05-09-2024', 100.00), -- 4 из 7 брюк
(3, 3, 3, '06-09-2024', 75.00),  -- оставшиеся 3 брюки
(4, 4, 3, '07-09-2024', 180.00), -- все 3 куртки
(5, 5, 8, '08-09-2024', 162.40); -- все 8 юбок

SELECT 
			tw.task_worker_id,
			t.task_name,
			CONCAT(w.worker_fname, ' ', w.worker_sname) AS worker_name,
			tw.tw_done AS task_count,
			tw.tw_day_sum AS total_sum,
			tw.tw_date AS task_date
		FROM 
			Workers w
			JOIN Task_Workers tw ON w.worker_id = tw.worker_id
			JOIN Tasks t ON t.task_id = tw.task_id
	WHERE 
		w.worker_fname = "Emily" AND w.worker_sname = "Brown" AND tw.tw_date BETWEEN "01-09-2024" AND "30-09-2024";